"""
–°–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
"""

import asyncio
import logging
from typing import Optional, Dict, Any
import os
from httpx import AsyncClient, TimeoutException
from itertools import cycle
import time

logger = logging.getLogger(__name__)

class IntensiveNotifier:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self, config):
        self.config = config
        self.is_active = False
        self.current_notifications = 0
        self.stop_event = asyncio.Event()
        
        # HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è Bot API
        self.http_client = AsyncClient(
            base_url="https://api.telegram.org/",
            timeout=config.HTTP_REQUEST_TIMEOUT
        )
        
        # –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–π –∏—Ç–µ—Ä–∞—Ç–æ—Ä –ø–æ —Ç–æ–∫–µ–Ω–∞–º –±–æ—Ç–æ–≤
        self.bot_tokens_cycle = cycle(config.BOT_TOKENS)
        
        # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        self.basic_request_data = {
            "parse_mode": "HTML",
            "disable_web_page_preview": True
        }
    
    async def send_bot_request(self, method: str, data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Bot API —Å —Ä–æ—Ç–∞—Ü–∏–µ–π —Ç–æ–∫–µ–Ω–æ–≤"""
        retries = len(self.config.BOT_TOKENS)
        
        for bot_token in self.bot_tokens_cycle:
            retries -= 1
            if retries < 0:
                break
                
            try:
                response = (await self.http_client.post(
                    f"/bot{bot_token}/{method}",
                    json=data
                )).json()
                
                if response.get("ok"):
                    return response.get("result")
                    
            except TimeoutException:
                logger.warning(f"Timeout –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {method}")
                continue
        
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å {method}")
        return None
    
    async def send_wake_up_sticker(self, chat_id: int, sticker_data: bytes, filename: str) -> Optional[int]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∏–∫–µ—Ä–∞
            bot_token = next(self.bot_tokens_cycle)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä —á–µ—Ä–µ–∑ multipart/form-data
            files = {
                'sticker': (filename, sticker_data, 'application/octet-stream')
            }
            data = {
                'chat_id': str(chat_id)
            }
            
            response = await self.http_client.post(
                f"/bot{bot_token}/sendSticker",
                files=files,
                data=data
            )
            
            result = response.json()
            if result.get("ok"):
                return result["result"]["message_id"]
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∏–∫–µ—Ä–∞: {e}")
            
        return None
    
    async def send_intensive_notification(self, chat_id: int, message: str, notification_num: int) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è
        wake_up_message = f"""
üö® –í–ù–ò–ú–ê–ù–ò–ï! –ù–û–í–´–ô –ü–û–î–ê–†–û–ö #{notification_num}! üö®

‚è∞ –í–†–ï–ú–Ø: {time.strftime('%H:%M:%S')}
üéØ –î–ï–ô–°–¢–í–£–ô –ë–´–°–¢–†–û!

{message}

üí• –ü–†–û–°–ù–ò–°–¨ –ò –ü–û–ö–£–ü–ê–ô! üí•
"""
        
        data = {
            "chat_id": chat_id,
            "text": wake_up_message,
            **self.basic_request_data
        }
        
        result = await self.send_bot_request("sendMessage", data)
        return result is not None
    
    async def start_intensive_notifications(self, chat_id: int, gift_message: str, sticker_data: bytes, sticker_filename: str):
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if self.is_active:
            logger.warning("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã")
            return
        
        self.is_active = True
        self.current_notifications = 0
        self.stop_event.clear()
        
        logger.info(f"üö® –ù–ê–ß–ò–ù–ê–Æ –ò–ù–¢–ï–ù–°–ò–í–ù–´–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø! –ú–∞–∫—Å–∏–º—É–º: {self.config.MAX_NOTIFICATIONS}")
        
        try:
            # –ü–µ—Ä–≤—ã–π —Å—Ç–∏–∫–µ—Ä –¥–ª—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è
            sticker_msg_id = await self.send_wake_up_sticker(chat_id, sticker_data, sticker_filename)
            if sticker_msg_id:
                logger.info("üìå –°—Ç–∏–∫–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è")
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ —Å—Ç–∏–∫–µ—Ä–∞
            await asyncio.sleep(self.config.NOTIFY_AFTER_STICKER_DELAY)
            
            # –¶–∏–∫–ª –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            while (self.current_notifications < self.config.MAX_NOTIFICATIONS and 
                   not self.stop_event.is_set()):
                
                self.current_notifications += 1
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                success = await self.send_intensive_notification(
                    chat_id, 
                    gift_message, 
                    self.current_notifications
                )
                
                if success:
                    logger.info(f"üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ #{self.current_notifications} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ #{self.current_notifications}")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ç–∏–∫–µ—Ä –∫–∞–∂–¥—ã–µ 5 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                if self.current_notifications % 5 == 0:
                    await self.send_wake_up_sticker(chat_id, sticker_data, sticker_filename)
                    logger.info(f"üìå –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ç–∏–∫–µ—Ä #{self.current_notifications//5}")
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
                await asyncio.sleep(self.config.NOTIFICATION_INTERVAL)
            
            if self.stop_event.is_set():
                logger.info(f"üõë –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Ä—É—á–Ω—É—é –Ω–∞ #{self.current_notifications}")
            else:
                logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {self.current_notifications}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö: {e}")
        finally:
            self.is_active = False
            self.current_notifications = 0
    
    def stop_notifications(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if self.is_active:
            self.stop_event.set()
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        else:
            logger.info("‚ÑπÔ∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã")
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        return {
            "is_active": self.is_active,
            "current_notifications": self.current_notifications,
            "max_notifications": self.config.MAX_NOTIFICATIONS,
            "interval": self.config.NOTIFICATION_INTERVAL
        }