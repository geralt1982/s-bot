import logging
import os
from pathlib import Path

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
WORK_DIRPATH = Path(__file__).parent

# –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
SESSION_NAME = os.getenv("SESSION_NAME", "gifts_monitor")
API_ID = int(os.getenv("API_ID", "0"))
API_HASH = os.getenv("API_HASH", "")

# –¢–æ–∫–µ–Ω—ã –±–æ—Ç–æ–≤ - —á–∏—Ç–∞–µ–º –∏–∑ BOT_TOKENS (–∫–∞–∫ –≤ Render)
BOT_TOKENS = [
    token.strip()
    for token in os.getenv("BOT_TOKENS", "").split(",")
    if token.strip()
]

CHECK_INTERVAL = float(os.getenv("CHECK_INTERVAL", "1.0"))
CHECK_UPGRADES_PER_CYCLE = float(os.getenv("CHECK_UPGRADES_PER_CYCLE", "2.0"))

DATA_FILEPATH = WORK_DIRPATH / "star_gifts.json"
DATA_SAVER_DELAY = float(os.getenv("DATA_SAVER_DELAY", "2.0"))

NOTIFY_CHAT_ID = int(os.getenv("NOTIFY_CHAT_ID", "0"))
NOTIFY_UPGRADES_CHAT_ID = int(os.getenv("NOTIFY_UPGRADES_CHAT_ID", "0")) if os.getenv("NOTIFY_UPGRADES_CHAT_ID") else None

NOTIFY_AFTER_STICKER_DELAY = float(os.getenv("NOTIFY_AFTER_STICKER_DELAY", "1.0"))
NOTIFY_AFTER_TEXT_DELAY = float(os.getenv("NOTIFY_AFTER_TEXT_DELAY", "2.0"))

# –í–∞–∂–Ω–æ! –≠—Ç–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω—É–∂–Ω–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ detector.py
TIMEZONE = os.getenv("TIMEZONE", "UTC")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
CONSOLE_LOG_LEVEL = logging.DEBUG
FILE_LOG_LEVEL = logging.INFO

HTTP_REQUEST_TIMEOUT = float(os.getenv("HTTP_REQUEST_TIMEOUT", "20.0"))

# –¢–µ–∫—Å—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∏–∑ config.example.py)
NOTIFY_TEXT = """{title}

‚Ññ {number} (<code>{id}</code>)

{total_amount}{available_amount}{sold_out}

üíé Price: {price} ‚≠êÔ∏è

‚ôªÔ∏è Convert price: {convert_price} ‚≠êÔ∏è

"""

NOTIFY_TEXT_TITLES = {
    True: "üî• A new limited gift has appeared",
    False: "‚ùÑÔ∏è A new gift has appeared"
}

NOTIFY_TEXT_TOTAL_AMOUNT = "\nüéØ Total amount: {total_amount}"
NOTIFY_TEXT_AVAILABLE_AMOUNT = "\n‚ùì Available amount: {available_amount} ({same_str}{available_percentage}%, updated at {updated_datetime} UTC)\n"
NOTIFY_TEXT_SOLD_OUT = "\n‚è∞ Completely sold out in {sold_out}\n"
NOTIFY_UPGRADES_TEXT = "Gift is upgradable! (<code>{id}</code>)"

def validate_config():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    errors = []
    
    if not API_ID or API_ID == 0:
        errors.append("API_ID –Ω–µ –∑–∞–¥–∞–Ω")
    
    if not API_HASH:
        errors.append("API_HASH –Ω–µ –∑–∞–¥–∞–Ω")
    
    if not BOT_TOKENS:
        errors.append("BOT_TOKENS –Ω–µ –∑–∞–¥–∞–Ω—ã")
    
    if not NOTIFY_CHAT_ID or NOTIFY_CHAT_ID == 0:
        errors.append("NOTIFY_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω")
    
    if errors:
        raise ValueError(f"–û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {', '.join(errors)}")
    
    return True
